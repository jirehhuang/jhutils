"""Assistant agent."""

import warnings
from typing import Optional, Union

from atomic_agents import AgentConfig, AtomicAgent, BaseIOSchema
from atomic_agents.context import SystemPromptGenerator
from pydantic import Field

from .tools import (
    AddShoppingItemsConfig,
    AddShoppingItemsInputSchema,
    AddShoppingItemsOutputSchema,
    AddShoppingItemsTool,
    AddTasksConfig,
    AddTasksInputSchema,
    AddTasksOutputSchema,
    AddTasksTool,
)


class AssistantInputSchema(BaseIOSchema):
    """Input schema for the assistant."""

    chat_message: str = Field(
        ...,
        description=("The user's input message to be analyzed and addressed."),
    )


class AssistantOutputSchema(BaseIOSchema):
    """Combined output schema for the Assistant Agent.

    Contains the tool parameters.
    """

    tool_parameters: Union[
        AddShoppingItemsInputSchema, AddTasksInputSchema
    ] = Field(..., description="The parameters for the selected tool.")


class FinalAnswerSchema(BaseIOSchema):
    """Schema for the final answer generated by the Assistant Agent."""

    final_answer: str = Field(
        ...,
        description=("The final answer concisely responding to the user."),
    )


class AssistantAgentConfig(AgentConfig):
    """Configuration for the Assistant Agent."""

    add_tasks_config: AddTasksConfig
    add_shopping_items_config: AddShoppingItemsConfig


class AssistantAgent:
    """Assistant agent."""

    def __init__(self, client):
        self._assistant_agent_config = AgentConfig(
            client=client,
            model="gpt-4o-mini",
            model_api_parameters={"temperature": 0.0},
            system_prompt_generator=SystemPromptGenerator(
                background=[
                    (
                        "You are an assistant who helps users manage their "
                        "shopping lists and tasks."
                    ),
                    (
                        "Use the add shopping items tool to add items to the "
                        "shopping list."
                    ),
                    (
                        "Use the add tasks tool to add individual tasks to "
                        "the task list."
                    ),
                ],
                output_instructions=[
                    (
                        "Analyze the user's input to determine whether to add "
                        "shopping items or tasks."
                    ),
                    (
                        "For shopping items, use the 'add_shopping_items' "
                        "tool and provide individual items to add."
                    ),
                    (
                        "For tasks, use the 'add_tasks' tool and provide "
                        "individual tasks to add."
                    ),
                    "When uncertain, prefer using the tasks tool.",
                    (
                        "Respond concisely to the user using the appropriate "
                        "schema."
                    ),
                ],
            ),
        )
        self.agent = AtomicAgent[AssistantInputSchema, AssistantOutputSchema](
            config=self._assistant_agent_config
        )
        self._final = AtomicAgent[AssistantInputSchema, FinalAnswerSchema](
            config=self._assistant_agent_config
        )
        self.tools = {
            "add_shopping_items": AddShoppingItemsTool(),
            "add_tasks": AddTasksTool(),
        }
        self._response: Optional[
            Union[AddShoppingItemsOutputSchema, AddTasksOutputSchema]
        ] = None

    def execute_tool(
        self, assistant_output: AssistantOutputSchema
    ) -> Union[AddShoppingItemsOutputSchema, AddTasksOutputSchema]:
        """Execute the selected tool with the provided parameters."""
        if isinstance(
            assistant_output.tool_parameters, AddShoppingItemsInputSchema
        ):
            self._response = self.tools["add_shopping_items"].run(
                assistant_output.tool_parameters
            )
            return self._response
        if isinstance(assistant_output.tool_parameters, AddTasksInputSchema):
            self._response = self.tools["add_tasks"].run(
                assistant_output.tool_parameters
            )
            return self._response
        raise ValueError(  # pragma: no cover
            "Unknown tool parameters type: "
            f"{type(assistant_output.tool_parameters)}"
        )

    def respond_and_reset(
        self,
        response: Optional[
            Union[AddShoppingItemsOutputSchema, AddTasksOutputSchema]
        ] = None,
    ) -> FinalAnswerSchema:
        """Respond to the user and reset the agent for the next interaction."""
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            self._final.history = self.agent.history.copy()
        self._final.history.add_message("system", response or self._response)
        final_answer = self._final.run(
            AssistantInputSchema(
                chat_message=(
                    "Review the chat history and provide a concise response "
                    "to the user confirming success or informing failure. "
                    "Do not copy the tool output directly and be as concise "
                    "as possible."
                )
            )
        )

        self.agent = AtomicAgent[AssistantInputSchema, AssistantOutputSchema](
            config=self._assistant_agent_config
        )

        return final_answer
